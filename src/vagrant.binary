#!/bin/bash -ex
# vi: ts=4 noexpandtab
#
# Generate a generic Vagrant Box.
#

cur_d=${PWD}
my_d=$(dirname $(readlink -f ${0}))

ARCH=amd64

source_url="${SOURCE_IMG_URL:-https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-$ARCH.img}"
build_id="${BUILD_ID:-$(date +%Y%m%d)}"
build_d="${BUILD_DIR:-$cur_d}"

for f in "${my_d}/functions/"*; do
  . "$f"
done

install_dependencies

# Lets be safe about this
box_libvirt_d=$(mktemp -d)
box_virtualbox_d=$(mktemp -d)
seed_d=$(mktemp -d)
mount_d=$(mktemp -d)

if [ ! -f "${build_d}/binary/boot/disk.ext4" ]; then
    mkdir -p "${build_d}/binary/boot"
    wget -qO "${build_d}/binary/boot/disk.ext4" "${source_url}"
fi

create_derivative "disk" "vagrant" "${build_d}/binary/boot" #sets ${derivative_img}
mount_disk_image ${derivative_img} ${mount_d}

cleanup_vagrant() {
    if [ -d "$mount_d" ]; then
        umount_disk_image "$mount_d"
    fi
    rm -rf ${box_libvirt_d} ${box_virtualbox_d} ${seed_d} ${mount_d} ${derivative_img}
}
trap cleanup_vagrant EXIT


##########################
### Vagrant User Setup
##########################

# Create and setup users inside the image.
# Vagrant users expect a "vagrant" user with a "vagrant" username.
# See https://www.vagrantup.com/docs/boxes/base.html
# Note: We decided NOT to allow root login with a default password.
chroot ${mount_d} adduser vagrant --disabled-password --gecos ""
echo "vagrant:vagrant" | chroot ${mount_d} chpasswd

# The vagrant user should have passwordless sudo.
cat << EOF > ${mount_d}/etc/sudoers.d/vagrant
vagrant ALL=(ALL) NOPASSWD:ALL
EOF

# Add an insecure vagrant pubkey to the vagrant user, as is expected by the
# vagrant ecosystem (https://www.vagrantup.com/docs/boxes/base.html)
chroot ${mount_d} chmod 0440 /etc/sudoers.d/vagrant
chroot ${mount_d} mkdir /home/vagrant/.ssh
wget -qO ${mount_d}/home/vagrant/.ssh/authorized_keys https://raw.githubusercontent.com/hashicorp/vagrant/main/keys/vagrant.pub.ed25519
chroot ${mount_d} chown -R vagrant:vagrant /home/vagrant/.ssh
chroot ${mount_d} chmod 700 /home/vagrant/.ssh

# Used to identify bits
suite=$(chroot ${mount_d} lsb_release -c -s)
version=$(chroot ${mount_d} lsb_release --release --short)
distro=$(chroot ${mount_d} lsb_release --id --short | tr [:upper:] [:lower:])

umount_disk_image "$mount_d"
rmdir "$mount_d"

# Get the images in place
prefix="${distro}-${suite}-${version}-cloudimg"
qcow2_f="${box_libvirt_d}/${prefix}.img"
create_qcow2 ${derivative_img} ${qcow2_f} 40960
vmdk_f="${box_virtualbox_d}/${prefix}.vmdk"
create_vmdk ${derivative_img} ${vmdk_f} 40960

####################################
# Create the ConfigDrive
# This is a cloud-init piece that instructs cloud-init to configure
# a default user at first boot.

cdrom_qcow2_f="${box_libvirt_d}/${prefix}-configdrive.img"
cdrom_vmdk_f="${box_virtualbox_d}/${prefix}-configdrive.vmdk"

# Create the user-data. This is totally insecure, but so is Vagrant. To
# mitigate this insecurity, the vagrant instance is not accessible
# except via local host.
create_from_template "${seed_d}/user-data" "${my_d}/templates/common/user-data.tmpl"

# Create the fake meta-data
create_from_template "${seed_d}/meta-data" "${my_d}/templates/common/meta-data.tmpl" \
    "instance_id=iid-$(openssl rand -hex 8)" \
    "hostname=ubuntu-${suite}"

create_configdrive "${seed_d}"

# Make an image out of the seed file.
create_qcow2 ${seed_d}/seed.iso ${cdrom_qcow2_f} 10
create_vmdk ${seed_d}/seed.iso ${cdrom_vmdk_f} 10

### END Create ConfigDrive

# Get information about the disks
qcow2_size=$(get_image_size "${qcow2_f}")
qcow2_capacity=$(get_image_capacity "${qcow2_f}")
qcow2_sha256=$(get_image_checksum "${qcow2_f}")

cdrom_qcow2_size=$(get_image_size "${cdrom_qcow2_f}")
cdrom_qcow2_capacity=$(get_image_capacity "${cdrom_qcow2_f}")
cdrom_qcow2_sha256=$(get_image_checksum "${cdrom_qcow2_f}")

vmdk_size=$(get_image_size "${vmdk_f}")
vmdk_capacity=$(get_image_capacity "${vmdk_f}")
vmdk_sha256=$(get_image_checksum "${vmdk_f}")

cdrom_vmdk_size=$(get_image_size "${cdrom_vmdk_f}")
cdrom_vmdk_capacity=$(get_image_capacity "${cdrom_vmdk_f}")
cdrom_vmdk_sha256=$(get_image_checksum "${cdrom_vmdk_f}")

##########################
# VAGRANT meta-data

# Create the Vagrant file. This file is used by Vagrant to define how
# Vagrant uses libvirt and how Vagrant interacts with the host.
create_from_template "${box_libvirt_d}/Vagrantfile" "${my_d}/templates/libvirt/Vagrantfile.tmpl" \
    "console_log_filename=${prefix}-console.log"

macaddr="02$(openssl rand -hex 5 | tr [:lower:] [:upper:])"
create_from_template "${box_virtualbox_d}/Vagrantfile" "${my_d}/templates/virtualbox/Vagrantfile.tmpl" \
    "base_mac=${macaddr}" \
    "console_log_filename=${prefix}-console.log"

# Populate the metadata files
serial_stamp=$(date +%Y%m%d)
create_from_template "${box_libvirt_d}/metadata.json" "${my_d}/templates/libvirt/metadata.json.tmpl" \
    "date=${serial_stamp}" \
    "disk1_capacity=${qcow2_capacity}" \
    "disk1_filename=${qcow2_f##*/}" \
    "disk2_capacity=${cdrom_qcow2_capacity}" \
    "disk2_filename=${cdrom_qcow2_f##*/}"

create_from_template "${box_virtualbox_d}/metadata.json" "${my_d}/templates/virtualbox/metadata.json.tmpl"

# END
##########################

##########################
# Create the actual box

# Populate the OVF template
ovf="${box_virtualbox_d}/box.ovf"
serial_stamp=$(date +%Y%m%d)
create_from_template "${ovf}" "${my_d}/templates/virtualbox/box.ovf.tmpl" \
    "date=${serial_stamp}" \
    "mem_size=1024" \
    "num_cpus=2" \
    "ovf_desc_bits=64" \
    "ovf_id=94" \
    "ovf_name=${prefix}-${serial_stamp}" \
    "ovf_os_type=ubuntu64Guest" \
    "ubuntu_version=${version}" \
    "disk1_capacity=${vmdk_capacity}" \
    "disk1_filename=${vmdk_f##*/}" \
    "disk1_size=${vmdk_size}" \
    "disk2_capacity=${cdrom_vmdk_capacity}" \
    "disk2_filename=${cdrom_vmdk_f##*/}" \
    "disk2_size=${cdrom_vmdk_size}"

# Generate the manifest
manifest="${box_libvirt_d}/${prefix}.mf"
create_manifest "${manifest}" "${box_libvirt_d}"

manifest="${box_virtualbox_d}/${prefix}.mf"
create_manifest "${manifest}" "${box_virtualbox_d}"

# Now create the box
echo "Creating boxes with the following attributes:"
cat <<EOM
OVA information:
    Name:           ${prefix}
    Size:           ${vmdk_size}
    VMDK Name:      ${vmdk_f##*/}
    VMDK Capacity:  ${vmdk_capacity}
    VMDK SHA256:    ${vmdk_sha256}
    CDROM Name:     ${cdrom_vmdk_f##*/}
    CDROM Capacity: ${cdrom_vmdk_capacity}
    CDROM SHA256:   ${cdrom_vmdk_sha256}

QCOW2 information:
    Name:           ${prefix}
    Size:           ${qcow2_size}
    QCOW2 Name:     ${qcow2_f##*/}
    QCOW2 Capacity: ${qcow2_capacity}
    QCOW2 SHA256:   ${qcow2_sha256}
    CDROM Name:     ${cdrom_qcow2_f##*/}
    CDROM Capacity: ${cdrom_qcow2_capacity}
    CDROM SHA256:   ${cdrom_qcow2_sha256}
EOM

box_qcow2_f="${build_d}/${build_id}/${suite}-server-cloudimg-${ARCH}-vagrant-libvirt.box"
create_box "${box_qcow2_f}" "${box_libvirt_d}"

box_vmdk_f="${build_d}/${build_id}/${suite}-server-cloudimg-${ARCH}-vagrant-virtualbox.box"
create_box "${box_vmdk_f}" "${box_virtualbox_d}"
